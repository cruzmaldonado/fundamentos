html {
  font-family: sans-serif;
  font-size: 16px;
  box-sizing: border-box;
}

*, *::before, *::after {
  box-sizing: inherit;
}

body {
  max-width: 692px;
  margin: 0 auto;
  padding: 20px;
  line-height: 1.5;
}

img {
  width: 100%;
}

.img-container {
  width: 450px;
  margin: 0 auto;
}

/* Para activar el modo flexbox, hemos utilizado sobre el elemento contenedor la propiedad display y especificar el valor flex o inline-flex (dependiendo de como queramos que se comporte el contenedor): */

.container {
  /* flex | inline-flex */
  /* display: flex;  */
  display: flex;
  width: 100%;
  min-height: 50vh;
  background-color: lightskyblue;
  border: 1px solid blue;
}

.container > div {
  width: 150px;
  padding: 20px;
  background-color: lightcyan;
  border: 2px solid white;
  outline:1px solid blue;
  border-radius: 15px;
}

/* flex-direction: Cambia la orientación del eje principal. */
.direction {
  flex-direction: row; /* row | row-reverse | column | column-reverse */
  /* flex-direction: row-reverse;
  flex-direction: column;
  flex-direction: column-reverse; */
}

.wrap {
  flex-wrap: nowrap; /* wrap | nowrap | wrap-reverse */
  flex-wrap: wrap-reverse;
  flex-wrap: wrap;
}

/* Atajo: Dirección de los ejes
  flex-flow: <flex-direction> <flex-wrap>;
*/

.alineacion {
    /* justify-content: sirve para colocar los ítems de un contenedor mediante una disposición concreta a lo largo del eje principal: */
  justify-content: flex-start; /* flex-start | flex-end | center | space-between | space-around | space-evenly */
  justify-content: flex-end;
  justify-content: space-around;
  justify-content: center;
  justify-content: space-between;
  justify-content: space-evenly;

    /* align-items: se encarga de alinear los ítems en el eje secundario del contenedor: */
  align-items: stretch; /* flex-start | flex-end | center | baseline | stretch */
  align-items: flex-end;
  align-items: baseline;
  align-items: flex-start;
  align-items: center;
}

.align-content {
  flex-wrap: wrap;
  justify-content: center;
  align-content: center; /* flex-start | flex-end | center | space-between | space-around | space-evenly | stretch */
  align-content: flex-start;
  align-content: flex-end;
  align-content: stretch;
  align-content: space-between;
  align-content: space-around;
  align-content: space-evenly;
}

/* Atajo: Alineaciones
  place-content: <align-content> <justify-content>;
*/

/* Propiedades para los Flex Items */

.align-self div:nth-child(1) {
  align-self: flex-start;/* flex-start | flex-end | center | baseline | stretch */
}

.align-self div:nth-child(2) {
  align-self: flex-end;
}

.align-self div:nth-child(3) {
  align-self: center;
}

.align-self div:nth-child(4) {
  align-self: baseline;
}

.align-self div:nth-child(5) {
  align-self: stretch;
}

.grow {
  align-items: center;
}

.grow div:nth-child(1) {
  flex-grow: 0;
}

.grow div:nth-child(2) {
  flex-grow: 2;
}

.grow div:nth-child(3) {
  flex-grow: 1;
}

.shrink {
  align-items: center;
}

/* flex-shirnk aplica un factor de decrecimiento. De esta forma, los ítems que tengan un valor numérico más grande, serán más pequeños, mientras que los que tengan un valor numérico más pequeño serán más grandes */

.shrink div:nth-child(1) {
  flex-shrink: 1;
}

.shrink div:nth-child(2) {
  flex-shrink: 0;
}

.shrink div:nth-child(3) {
  flex-shrink: 2;
}


.basis {
  align-items: center;
}

.basis div:nth-child(1) {
  flex-basis: 100%;
}

.basis div:nth-child(2) {
  flex-basis: 50%;
}

.basis div:nth-child(3) {
  flex-basis: 20%;
}

/*
  Ten en cuenta que sólo una de las dos propiedades tendrá efecto, dependiendo de si la propiedad flex-direction está establecida en column o en row. Eso sí, es posible usar ambas si tenemos la propiedad flex-wrap definida a wrap y, por lo tanto, disponemos de multicolumnas flexbox.
*/

.gaps {
  /* flex-direction: column; */
  justify-content: center;
  align-items: center;

  /* column-gap: 16px; */
  /* column-gap: Espacio entre columnas (sólo si flex-direction: row) */

  /* row-gap: 16px; */
  /* row-gap: Espacio entre filas (sólo si flex-direction: column) */

  gap: 16px;
}

/* Atajo: Huecos
  gap: <row> <column>

  1 parámetro: usa el mismo para ambos
  gap: <ambos>
*/

.order {
  align-items: center;
}

.order div:nth-child(1) {
  order: 4;
}

.order div:nth-child(2) {
  order: 5;
}

.order div:nth-child(3) {
  order: 3;
}

.order div:nth-child(4) {
  order: 1;
}

.order div:nth-child(5) {
  order: 2;
}